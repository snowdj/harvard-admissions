{"version":3,"sources":["components/Input.js","components/Probability.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","state","mathSAT","verbalSAT","GPA","subjectSAT","citizenship","ethnicity","athletics","connections","handleChange","bind","check","event","preventDefault","this","setState","target","name","value","checked","className","type","min","max","step","onChange","subjetSAT","React","Component","Probability","percent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQA2IeA,G,wDAvIX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,QAAS,IACTC,UAAW,IACXC,IAAK,EACLC,WAAY,IACZC,aAAa,EACbC,UAAW,QACXC,WAAW,EACXC,aAAa,GAGlB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBAdE,E,yDAiBLE,GACTA,EAAMC,iBACNC,KAAKC,SAAL,eACKH,EAAMI,OAAOC,KAAOL,EAAMI,OAAOE,U,4BAIpCN,GACYA,EAAMI,OAAOG,QAEvBL,KAAKC,SAAL,eACKH,EAAMI,OAAOC,MAAO,IAGzBH,KAAKC,SAAL,eACKH,EAAMI,OAAOC,MAAO,M,+BAO7B,OACI,yBAAKG,UAAU,QACX,8BACI,2BAAG,+FACH,2BACIC,KAAK,QACLC,IAAK,IACLC,IAAK,IACLL,MAAOJ,KAAKd,MAAMC,QAClBuB,KAAM,GAAIP,KAAK,UACfQ,SAAUX,KAAKL,eAEnB,6BAAMK,KAAKd,MAAMC,SAEjB,2BAAG,iGACH,2BACIoB,KAAK,QACLC,IAAK,IACLC,IAAK,IACLL,MAAOJ,KAAKd,MAAME,UAClBsB,KAAM,GAAIP,KAAK,YACfQ,SAAUX,KAAKL,eAEnB,6BAAMK,KAAKd,MAAME,WAEjB,2BAAG,iGACH,2BACImB,KAAK,QACLC,IAAK,EACLC,IAAK,EACLL,MAAOJ,KAAKd,MAAMG,IAClBqB,KAAM,IACNP,KAAK,MACLQ,SAAUX,KAAKL,eAEnB,6BAAMK,KAAKd,MAAMG,KAjCrB,IAmCI,2BAAG,wHACH,2BACIkB,KAAK,QACLC,IAAK,IACLC,IAAK,IACLL,MAAOJ,KAAKd,MAAM0B,UAClBF,KAAM,GAAIP,KAAK,aACfQ,SAAUX,KAAKL,eAEnB,6BAAMK,KAAKd,MAAMI,YAEjB,2BAAG,+EA9CP,MA+CO,2BACCiB,KAAK,WACLF,QAASL,KAAKd,MAAMK,YACpBY,KAAK,cACLQ,SAAUX,KAAKH,QAGnB,2BAAG,gEACH,4BACIM,KAAK,YACLE,QAASL,KAAKd,MAAMM,UACpBmB,SAAUX,KAAKL,cAEf,4BAAQS,MAAM,SAAd,SACA,4BAAQA,MAAM,oBAAd,oBACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,kBAAd,kBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,eAAd,sBAGJ,2BAAG,6FApEP,MAqEO,2BACCG,KAAK,WACLJ,KAAK,YACLE,QAASL,KAAKd,MAAMO,UACpBkB,SAAUX,KAAKH,QAGnB,2BAAG,wJACH,4BACI,0EACA,6EACA,oGAhFR,MAkFO,2BACCU,KAAK,WACLJ,KAAK,cACLE,QAASL,KAAKd,MAAMQ,YACpBiB,SAAUX,KAAKH,c,GAhInBgB,IAAMC,YCWXC,E,uKATP,OACI,yBAAKT,UAAU,eACX,+EAAqDN,KAAKf,MAAM+B,QAAhE,W,GALUH,IAAMC,WCgBjBG,E,uKAZX,OACE,yBAAKX,UAAU,OACb,sFACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEU,QAAQ,W,GAPAH,IAAMC,WCQJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8201a5f3.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css'\n\nclass Input extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            mathSAT: 500,\n            verbalSAT: 500,\n            GPA: 4.0,\n            subjectSAT: 500,\n            citizenship: false,\n            ethnicity: 'white',\n            athletics: false,\n            connections: false\n        };\n\n       this.handleChange = this.handleChange.bind(this);\n       this.check = this.check.bind(this);\n    }\n\n    handleChange(event){\n        event.preventDefault();\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    check(event){\n        let checked = event.target.checked;\n        if(checked){\n            this.setState({\n                [event.target.name]: true\n            })\n        }else{\n            this.setState({\n                [event.target.name]: false\n            })\n        }\n    }\n\n    render(){\n\n        return(\n            <div className='form'>\n                <form>\n                    <p><label>What was your highest score on the math section of the SAT?</label></p>\n                    <input \n                        type='range' \n                        min={200} \n                        max={800} \n                        value={this.state.mathSAT} \n                        step={10} name='mathSAT' \n                        onChange={this.handleChange}\n                    />\n                    <div>{this.state.mathSAT}</div>\n                    \n                    <p><label>What was your highest score on the verbal section of the SAT?</label></p>\n                    <input \n                        type='range' \n                        min={200} \n                        max={800} \n                        value={this.state.verbalSAT} \n                        step={10} name='verbalSAT' \n                        onChange={this.handleChange}\n                    />\n                    <div>{this.state.verbalSAT}</div>\n\n                    <p><label>What is your high school GPA (normalized to a 4-point scale)?</label></p>\n                    <input \n                        type='range' \n                        min={0.0} \n                        max={4.0} \n                        value={this.state.GPA} \n                        step={0.01} \n                        name='GPA' \n                        onChange={this.handleChange}\n                    />\n                    <div>{this.state.GPA}</div> {/* Not sure if we should have 2 or 3 significant figures here */}\n\n                    <p><label>What is your average score across all of the SAT II subject tests that you've taken?</label></p>\n                    <input \n                        type='range' \n                        min={200} \n                        max={800} \n                        value={this.state.subjetSAT} \n                        step={10} name='subjectSAT' \n                        onChange={this.handleChange}\n                    />\n                    <div>{this.state.subjectSAT}</div>\n\n                    <p><label>Are you a US citizen or permanent resident?</label></p>\n                    Yes<input \n                        type='checkbox' \n                        checked={this.state.citizenship} \n                        name='citizenship' \n                        onChange={this.check}\n                    />\n                   \n                    <p><label>What is your race/ethnicity?</label></p>\n                    <select \n                        name=\"ethnicity\" \n                        checked={this.state.ethnicity} \n                        onChange={this.handleChange}\n                    >\n                        <option value='white'>White</option>\n                        <option value='african-american'>African American</option>\n                        <option value='hispanic'>Hispanic</option>\n                        <option value='asian-american'>Asian-American</option>\n                        <option value='other'>Other</option>\n                        <option value='undisclosed'>Prefer not to say</option>\n                    </select>\n\n                    <p><label>Are you being recruited by Harvard for varsity athletics?</label></p>\n                    Yes<input \n                        type='checkbox' \n                        name='athletics'\n                        checked={this.state.athletics}\n                        onChange={this.check}\n                    /> \n\n                    <p><label>Do you have any non-athletic special connection to Harvard? For example, do any of the following cases apply to you:</label></p>\n                    <ul>\n                        <li>You have relatives who are Harvard alumni.</li>\n                        <li>You have relatives who are Harvard employees.</li>\n                        <li>You have relatives who made large donations to Harvard in the past.</li>\n                    </ul>\n                    Yes<input \n                        type='checkbox' \n                        name='connections'\n                        checked={this.state.connections}\n                        onChange={this.check}\n                    />\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Input;\n","import React from 'react';\n\nclass Probability extends React.Component {\n    \n    render(){\n        return(\n            <div className='probability'>\n                <p>Your probability of being accepted at Harvard is {this.props.percent}%.</p>\n            </div>\n        );\n    }\n\n}\n\nexport default Probability;","import React from 'react';\nimport Input from './components/Input';\nimport Probability from './components/Probability';\n\nclass App extends React.Component{\n  render(){\n    return (\n      <div className=\"app\">\n        <h3>What is your probability of being admitted to Harvard?</h3>\n        <Input />\n        <Probability \n          percent='X'\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}